from tkinter import ttk
from tkinter import *
from pathlib import Path
from tkinter import filedialog as fd
from tkinter.messagebox import showinfo
from model import model_instance
from classify import Classify
import pefile
from datetime import date
from watchdog.observers import Observer
import pickle
import os
import file_handler
from tkinter import filedialog
from functools import partial
import threading
from pystray import MenuItem as item
import pystray
from PIL import Image, ImageTk

downloads_path = str(Path.home() / "Downloads")
today = date.today()
OUTPUT_PATH = Path(__file__).parent
global folder_selected
folder_selected=""


class App:
    def setApp(self, app):
        """Get an instance of the GUI"""
        self.app = app

    def Scan_File(self, filename, top=None, partition=None):
        """Extract the API calls from the .exe file and insert it into the classifier class to predict the file."""
        global result
      
        try:

            file = pefile.PE(filename, fast_load=True)
            file.full_load()
            api_calls = []
            for item in file.DIRECTORY_ENTRY_IMPORT:
                for i in item.imports:
                    if i.name is not None:
                        api_calls.append(i.name.decode("utf-8"))
            print(api_calls)
            file.close()
            del file

            classifier_instance = Classify(api_calls, model_instance)

            result = classifier_instance.Prediction

            d4 = today.strftime("%b-%d-%Y")

            file__name = self.file_name_filter(filename)

            model_instance.history_list.append([file__name, d4, result])

            pickle.dump(model_instance.history_list, open(self.resource_path('Variables_assets/history.sav'), 'wb'))
            if top is not None:
                top.destroy()
            file_handler.Flag = False
            if partition is None:
                self.app.switch_frame(ResultPage)

            return result

        except:
            if (partition is None):
                showinfo(
                    title='File Selection',
                    message="Invalid File Format"
                )

    def select_partition(self):
        global folder_selected

        folder_selected = filedialog.askdirectory()
    def resource_path(self,relative_path):
        """ Get the absolute path to the resource, works for dev and for PyInstaller """
        try:
            # PyInstaller creates a temp folder and stores path in _MEIPASS
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")

        return os.path.join(base_path, relative_path)

    def scan_partition(self, top):
        
        global folder_selected
        checksum_files = []
        global partition_results
        partition_results = []

        for (dirpath, dirnames, filenames) in os.walk(folder_selected):
            checksum_files.extend(
                os.path.join(dirpath, filename) for filename in filenames if ".exe" in filename or '.dll' in filename)

        for file in checksum_files:

            result = self.Scan_File(file, partition=1)

            if result is None:

                partition_results.append([file, "Normal File"])
            else:
                partition_results.append([file, result])

        self.app.switch_frame(PartitionResults)
        top.destroy()
        folder_selected=""

    def select_file(self):
        """Pop up page in order to select the file to scan"""
        filetypes = (
            ('executable files', '*.exe'),
            ('dll files', '*.dll'),
            ('All files', '*.*')
        )

        file_handler.filename = fd.askopenfilename(
            title='Open a file',
            initialdir='/',
            filetypes=filetypes)
        observer._is_paused = True

        if file_handler.filename != "":
            showinfo(
                title='Selected File',
                message=file_handler.filename
            )
        observer._is_paused = False

    def file_name_filter(self, filename):
        """Limits the file name for better presentation"""
        if '.exe' in filename:
            substring = ".exe"
        else:
            substring = ".dll"
        file__name = filename.split("/")
        file__name = file__name[len(file__name) - 1]
        file__name = file__name.split("\\")
        file__name = file__name[len(file__name) - 1]
        file__name = file__name[0:len(file__name) - 4]

        if len(file__name) > 15:
            file__name = file__name[0:15]

        file__name += substring
        return file__name

    def setPath(self, path: str, page) -> Path:
        """Sets the path to the assets folders"""
        ASSETS_PATH = OUTPUT_PATH / Path(page)
        return ASSETS_PATH / Path(path)

    def Scan_Downloaded(self):
        """"Pop up a page when a new file is downloaded"""
        self.app.switch_frame(PopupPage)
      
    def ShowProgressBar(self, filename="",folder_selected="", src=None):
       
        if(folder_selected=="" and src==None):
                showinfo(
                    title='Folder Selection',
                    message="Please select a folder", icon='error'
                )
                return 0
        if(filename=="" and src=="single"):
           
                showinfo(
                    title='File Selection',
                    message="Please select a file", icon='error'
                )
                return 0

        t1 = threading.Thread(target=self.app.switch_frame(ProgressPage), args=(self.app,))
        if src == "single":
            t2 = threading.Thread(target=App_instance.Scan_File, args=(filename, self.app.top))
        else:
            t2 = threading.Thread(target=App_instance.scan_partition, args=(self.app.top,))
        t1.start()
        t2.start()

    def changeFlag(self, top):
        """Changes the flag after exiting the PopUp page."""

        file_handler.Flag = False

        top.destroy()

    def deleteFile(self, file, top=None):
        """Deletes the file if it's found malicious using the OS library"""
        try:
            os.remove(file)
            showinfo(
                title='Selected File',
                message="File Deleted"
            )
            if top is None:
                self.app.switch_frame(HomePage)

                file_handler.filename = ""
            else:
                partition_results.pop(top)

             
                self.app.switch_frame(PartitionResults)
        except:
            showinfo(
                title='Delete File',
                message="Access denied , can't delete the file",
                icon='error'
            )
            self.app.switch_frame(HomePage)


class GUI(Tk):
    def __init__(self):
        Tk.__init__(self)
        self.geometry("803x571")
        self.configure(bg="#FAFBFB")
        self.title("Ant Virus Application")
        self.resizable(False, False)
        self.frame = None
        self.switch_frame(HomePage)
        self.iconbitmap(App_instance.resource_path('Icon_assets/icon.ico'))
        # self.protocol("WM_DELETE_WINDOW", self.hide_window)
        

       
    def quit_window(self,icon, item):
        icon.stop()
        self.destroy()

    # Define a function to show the window again
    def show_window(self,icon, item):
       icon.stop()
       self.after(0,self.deiconify())

    # Hide the window and show on the system taskbar
    def hide_window(self):
       self.withdraw()
       
       image=Image.open(App_instance.resource_path("Icon_assets/icon.ico"))
       menu=( item('Show', self.show_window),item('Quit', self.quit_window))
       icon=pystray.Icon("name", image, "My System Tray Icon", menu)
       icon.run()

   



    def switch_frame(self, frame_class):
        """Destroys current frame and replaces it with a new one."""

        new_frame = frame_class(self)
        if self.frame is not None:
            self.frame.destroy()

        self.frame = new_frame

        self.frame.pack()


class HomePage(Frame):
    def __init__(self, master):
        Frame.__init__(self, master)
        canvas = Canvas(master,
                        bg="#FAFBFB",
                        height=571,
                        width=803,
                        bd=0,
                        highlightthickness=0,
                        relief="ridge"
                        )

        canvas.create_rectangle(
            0.0,
            0.0,
            803.0,
            49.6298828125,
            fill="#010718",
            outline="")
        global image_image_1

        image_image_1 = PhotoImage(
            file=App_instance.setPath("image_1.png", "./Home_assets"))
        canvas.create_image(
            73.0,
            24.0,
            image=image_image_1
        )

        canvas.create_text(
            27.32421875,
            188.48193359375,
            anchor="nw",
            text="Welcome To Our AntVirus Application",
            fill="#495463",
            font=("Poppins SemiBold", 40 * -1)
        )
        global image_image_2
        image_image_2 = PhotoImage(
            file=App_instance.setPath("image_2.png", "./Home_assets"))
        canvas.create_image(
            645.0,
            446.0,
            image=image_image_2
        )

        canvas.create_text(
            27.32421875,
            347.4090576171875,
            anchor="nw",
            text="Here you can scan your file.",
            fill="#000000",
            font=("Poppins Regular", 20 * -1)
        )
        global button_image_1
        button_image_1 = PhotoImage(
            file=App_instance.setPath("button_1.png", "./Home_assets"))
        button_1 = Button(master,
                          image=button_image_1,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#FAFBFB",
                          activebackground="#FAFBFB",
                          cursor="mouse",
                          command=lambda: master.switch_frame(ScanPage), relief="flat")
        button_1.place(
            x=27.32421875,
            y=404.2882080078125,
            width=211.0,
            height=20.0
        )

        global image_image_3
        image_image_3 = PhotoImage(
            file=App_instance.setPath("image_3.png", "./Home_assets"))
        canvas.create_image(
            522.15478515625,
            473.40625,
            image=image_image_3
        )
        global button_image_2
        button_image_2 = PhotoImage(
            file=App_instance.setPath("button_2.png", "./Home_assets"))
        button_2 = Button(master,
                          image=button_image_2,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: master.switch_frame(ScanPage), relief="flat")
        button_2.place(
            x=535.89111328125,
            y=9.4798583984375,
            width=87.0,
            height=30.0
        )
        global button_image_3
        button_image_3 = PhotoImage(
            file=App_instance.setPath("button_3.png", "./Home_assets"))
        button_3 = Button(master,
                          image=button_image_3,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: master.switch_frame(ScanPartition), relief="flat")
        button_3.place(
            x=644.63037109375,
            y=10.4798583984375,
            width=145.0,
            height=30.0
        )
        App_instance.setApp(master)
        canvas.place(x=0, y=0)


class ScanPage(Frame):

    def __init__(self, master):
        Frame.__init__(self, master)
        canvas = Canvas(master,
                        bg="#FAFBFB",
                        height=571,
                        width=804,
                        bd=0,
                        highlightthickness=0,
                        relief="ridge"
                        )

        canvas.create_rectangle(
            92.68310546875,
            79.8416748046875,
            727.508056640625,
            547.72509765625,
            fill="#010718",
            outline="")

        canvas.create_text(
            250.49169921875,
            173.6416015625,
            anchor="nw",
            text="You can upload your file here",
            fill="#FFFFFF",
            font=("Poppins Bold", 26 * -1)
        )
        global button_image_1
        button_image_1 = PhotoImage(
            file=App_instance.setPath("button_1.png", "./ScanFiles_assets"))
        button_1 = Button(master,
                          image=button_image_1,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: App_instance.select_file(),
                          relief="flat"
                          )
        button_1.place(
            x=256.27490234375,
            y=254.0416259765625,
            width=308.75830078125,
            height=57.50830078125
        )
        global button_image_2

        button_image_2 = PhotoImage(
            file=App_instance.setPath("button_2.png", "./ScanFiles_assets"))
        button_2 = Button(master,
                          image=button_image_2,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: App_instance.ShowProgressBar(file_handler.filename, src="single"),
                          relief="flat"
                          )
        button_2.place(
            x=319.92529296875,
            y=348.39990234375,
            width=180.341796875,
            height=49.13330078125
        )

        canvas.create_rectangle(
            0.0,
            0.0,
            804.0,
            49.691650390625,
            fill="#010718",
            outline="")
        global image_image_1
        image_image_1 = PhotoImage(
            file=App_instance.setPath("image_1.png", "./ScanFiles_assets"))
        canvas.create_image(
            73.0,
            24.0,
            image=image_image_1
        )
        global button_image_3
        button_image_3 = PhotoImage(
            file=App_instance.setPath("button_3.png", "./ScanFiles_assets"))
        button_3 = Button(master,
                          image=button_image_3,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: master.switch_frame(HistoryPage), relief="flat")

        button_3.place(
            x=691.77490234375,
            y=11.49169921875,
            width=72.0,
            height=30.0
        )
        global button_image_4
        button_image_4 = PhotoImage(
            file=App_instance.setPath("button_4.png", "./ScanFiles_assets"))
        button_4 = Button(master,
                          image=button_image_4,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: master.switch_frame(HomePage), relief="flat")

        button_4.place(
            x=610.25830078125,
            y=9.49169921875,
            width=61.0,
            height=30.0
        )
        canvas.place(x=0, y=0)


class ScanPartition(Frame):

    def __init__(self, master):
        Frame.__init__(self, master)
        canvas = Canvas(master,
                        bg="#FAFBFB",
                        height=571,
                        width=804,
                        bd=0,
                        highlightthickness=0,
                        relief="ridge"
                        )

        canvas.create_rectangle(
            92.68310546875,
            79.8416748046875,
            727.508056640625,
            547.72509765625,
            fill="#010718",
            outline="")

        canvas.create_text(
            215.49169921875,
            173.6416015625,
            anchor="nw",
            text="You can scan a whole partition here",
            fill="#FFFFFF",
            font=("Poppins Bold", 26 * -1)
        )
        global button_image_1
        button_image_1 = PhotoImage(
            file=App_instance.setPath("button_1.png", "./ScanPartition_assets"))
        button_1 = Button(master,
                          image=button_image_1,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: App_instance.select_partition(),
                          relief="flat"
                          )
        button_1.place(
            x=256.27490234375,
            y=254.0416259765625,
            width=308.75830078125,
            height=57.50830078125
        )
        global button_image_2
        global folder_selected
        button_image_2 = PhotoImage(
            file=App_instance.setPath("button_2.png", "./ScanFiles_assets"))
        button_2 = Button(master,
                          image=button_image_2,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: App_instance.ShowProgressBar(folder_selected=folder_selected),
                          relief="flat"
                          )
        button_2.place(
            x=319.92529296875,
            y=348.39990234375,
            width=180.341796875,
            height=49.13330078125
        )

        canvas.create_rectangle(
            0.0,
            0.0,
            804.0,
            49.691650390625,
            fill="#010718",
            outline="")
        global image_image_1
        image_image_1 = PhotoImage(
            file=App_instance.setPath("image_1.png", "./ScanFiles_assets"))
        canvas.create_image(
            73.0,
            24.0,
            image=image_image_1
        )
        global button_image_3
        button_image_3 = PhotoImage(
            file=App_instance.setPath("button_3.png", "./ScanFiles_assets"))
        button_3 = Button(master,
                          image=button_image_3,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: master.switch_frame(HistoryPage), relief="flat")

        button_3.place(
            x=691.77490234375,
            y=11.49169921875,
            width=72.0,
            height=30.0
        )
        global button_image_4
        button_image_4 = PhotoImage(
            file=App_instance.setPath("button_4.png", "./ScanFiles_assets"))
        button_4 = Button(master,
                          image=button_image_4,
                          borderwidth=0,
                          highlightthickness=0,
                          bg="#010718",
                          activebackground="#010718",
                          cursor="mouse",
                          command=lambda: master.switch_frame(HomePage), relief="flat")

        button_4.place(
            x=610.25830078125,
            y=9.49169921875,
            width=61.0,
            height=30.0
        )
        canvas.place(x=0, y=0)


class ResultPage(Frame):
    def __init__(self, master):
        Frame.__init__(self, master)
        canvas = Canvas(master,
                        bg="#FAFBFB",
                        height=571,
                        width=804,
                        bd=0,
                        highlightthickness=0,
                        relief="ridge"
                        )

        canvas.create_rectangle(
            92.6826171875,
            79.841796875,
            727.5078125,
            547.72509765625,
            fill="#010718",
            outline="")
       