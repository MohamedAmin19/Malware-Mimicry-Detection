class AntColony(object):

    def __init__(self, distances, n_ants, n_best, n_iterations, decay,start_points, alpha=1, beta=1):
        """
        Args:
            distances (2D numpy.array): Square matrix of distances. Diagonal is assumed to be np.inf.
            n_ants (int): Number of ants running per iteration
            n_best (int): Number of best ants who deposit pheromone
            n_iteration (int): Number of iterations
            decay (float): Rate it which pheromone decays. The pheromone value is multiplied by decay, so 0.95 will lead to decay, 0.5 to much faster decay.
            alpha (int or float): exponenet on pheromone, higher alpha gives pheromone more weight. Default=1
            beta (int or float): exponent on distance, higher beta give distance more weight. Default=1
        Example:
            ant_colony = AntColony(german_distances, 100, 20, 2000, 0.95, alpha=1, beta=2)          
        """
        self.distances  = distances
        self.pheromone = np.ones(self.distances.shape) / len(distances)
        self.all_inds = range(len(distances))
        self.n_ants = n_ants
        self.n_best = n_best
        self.n_iterations = n_iterations
        self.decay = decay
        self.alpha = alpha
        self.beta = beta
        self.matrix=np.zeros((len(distances),len(distances)))
        self.start_points=start_points
        
        

    def run(self):
        shortest_path = None
        all_time_shortest_path = ("placeholder", np.inf)
        for i in range(self.n_iterations):
            all_paths = self.gen_all_paths(i)
            self.spread_pheronome(all_paths, self.n_best, shortest_path=shortest_path)
            shortest_path = min(all_paths, key=lambda x: x[1])
            print (shortest_path)
            if shortest_path[1] < all_time_shortest_path[1]:
                all_time_shortest_path = shortest_path            
            self.pheromone = self.pheromone * self.decay
        
#         with open('test.txt', 'w') as f:
#             f.write(json.dumps(self.matrix.tolist()))

      


        return all_time_shortest_path
    
    
  
        
        
    
        

    def spread_pheronome(self, all_paths, n_best, shortest_path):
        sorted_paths = sorted(all_paths, key=lambda x: x[1])
        for path, dist in sorted_paths[:n_best]:
            for move in path:
                self.pheromone[move] += 1.0 / self.distances[move]

    def gen_path_dist(self, path):
        total_dist = 0
        for ele in path:
            total_dist += self.distances[ele]
        return total_dist

    def gen_all_paths(self,no):
        all_paths = []
        for i in range(self.n_ants):
            #starting=random.randint(0,len(self.distances)-1)
            starting=self.start_points[no]
            path = self.gen_path(starting)
           
            all_paths.append((path, self.gen_path_dist(path)))
            
        return all_paths
    def gen_path(self, start):
        path = []
        visited = set()
        visited.add(start)
        prev = start
        for i in range(len(self.distances) - 1):
            move=self.pick_move(self.pheromone[prev], self.distances[prev], visited)
            if(move=="Exit"):
                break
            else:
                

                
                path.append((prev, move))
                self.matrix[prev,move]=self.matrix[prev,move]+self.distances[prev,move] 
                prev = move
                visited.add(move)
        if(move=="Exit"):
            return path
        else:
            
            path.append((prev, start)) # going back to where we started    
            return path

    def pick_move(self, pheromone, dist, visited):
        pheromone = np.copy(pheromone)
        pheromone[list(visited)] = 0
        row = pheromone ** self.alpha * (( 1.0 / dist) ** self.beta)
        row[row == inf] = 0
        row=np.nan_to_num(row, nan=0.0)
        norm_row = row / row.sum()
        norm_row=np.nan_to_num(norm_row, nan=0.0)

       
        if(np.all((norm_row == 0))):
            return "Exit"
            
           
    
       
        else:
            move = np_choice(self.all_inds,1, p=norm_row)[0]
            return move



ant_colony = AntColony(np.array(model.our_tfidf_matrix),1, 1, len(start_points), 0.95,start_points ,alpha=1, beta=1) 
shortest_path = ant_colony.run()
print ("shorted_path: {}".format(shortest_path))
