class Model:

   
    def __init__(self,tfidf_instance=None,word2vec_instance=None):
        self.our_tfidf_matrix =[]
        self.our_word2vec_matrix =[]
        self.tfidf_instance=tfidf_instance
        self.word2vec_instance=word2vec_instance
    
    
    def create_tfidf_Matrix(self):
        for word in self.tfidf_instance.vocab:
            temp_list=[]
            for i in range(len(self.tfidf_instance.vocab)):
                temp=word+" "+self.tfidf_instance.vocab[i]
                temp2=self.tfidf_instance.vocab[i]+" "+word

                if(word==self.tfidf_instance.vocab[i]):
                    temp_list.append(0)


                elif temp in self.tfidf_instance.vectorizer.vocabulary_.keys():

                    c = self.tfidf_instance.vectorizer.vocabulary_[temp]

                    y=self.tfidf_instance.tfidf_vector[:,c].todense()
                    temp_list.append(y.sum()/len(y))
                elif temp2 in self.tfidf_instance.vectorizer.vocabulary_.keys():
                    
                    c = self.tfidf_instance.vectorizer.vocabulary_[temp2]
                    y=self.tfidf_instance.tfidf_vector[:,c].todense()
                    temp_list.append(y.sum()/len(y))

                else:
                    temp_list.append(0)


            self.our_tfidf_matrix.append(temp_list)
        #print(self.our_tfidf_matrix)
            
    def create_word2vec_Matrix(self):
        for word in self.word2vec_instance.vocabulary:
            temp_list=[]
            for i in range(len(self.word2vec_instance.vocabulary)):
                
                frequency= self.word2vec_instance.word2vec_vector.wv.similarity(word, self.word2vec_instance.vocabulary[i])
                if(word==self.word2vec_instance.vocabulary[i]):
            
                    temp_list.append(0)
                elif(frequency<=0):
                    temp_list.append(0)
          
                else:
                    temp_list.append(frequency.astype(np.float64))
            self.our_word2vec_matrix.append(temp_list)
        #print(self.our_word2vec_matrix)
#
            
    def write_Matrix(self,matrix,text_file):
            
        with open(text_file, 'w') as f:
            f.write(json.dumps(matrix))
                
    def read_tfidf_Matrix(self,text_file):
        with open(text_file, 'r') as f:
            self.our_tfidf_matrix = json.loads(f.read())
    def read_word2vec_Matrix(self,text_file):
         with open(text_file, 'r') as f:
            self.our_word2vec_matrix = json.loads(f.read())


            
            
            
