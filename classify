class extractFeatures:
    def maxTfidf(self,dataset):


#         data=pd.read_csv(dataset)
#         corpus=data['ImportedSymbols']
        corpus=dataset
        predicted_good=[]
        predicted_mal=[]
        equal=[]
        for j in range (len(corpus)):
            sum_mal=0
            sum_good=0
            new_test=corpus[j].split()
            


            for i in range(len(new_test)-3):
                temp=new_test[i].lower()+" "+new_test[i+1].lower()+" "+new_test[i+2]+" "+new_test[i+3]
               
                
                


                if(temp in tfidf.vectorizer.vocabulary_.keys()):
                    sum_good+=1
                    


                if(temp in tfidf2.vectorizer.vocabulary_.keys()):
                    sum_mal+=1
                    
               
                 

        #     if(sum_mal==0 and sum_good==0):
        #         print(new_test)
        #         print(i)


        #     print("GOOD SUM = "+str(sum_good)+str(i))
        #     print("MAL SUM = "+str(sum_mal)+str(i))
            if(sum_mal<sum_good):
                predicted_good.append(1)
               
                

            elif(sum_mal>sum_good):
                predicted_mal.append(1)

            else:
                equal.append(1)


        
        print("Length of the dataset is equal to " + str(len(dataset)))
        print("Instances classified as goodware "+str(len(predicted_good)))
        print("Instances classified as malware " + str(len(predicted_mal)))
        print("Cant Classify = " +str(len(equal)))
        
        
    
        
        
        
    def maxAnt(self,dataset,dataset2):
       
        data=pd.read_csv('braz-malware.csv')
        corpus=data['ImportedSymbols']
        corpus2=dataset2
        csv_input = pd.read_csv('braz-mal10.csv')

        predicted_good=[]
        predicted_mal=[]
        equal=[]
        for j in range (len(corpus)):
            sum_mal=0
            sum_good=0
            new_test=corpus[j].split()


            for i in range(len(new_test)-1):


                if(mix_malware_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_mal+=1
                    


                if(mix_goodware_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_good+=1
            if(sum_good==sum_mal):
                sum_mal+=10
                
                    
                    
            predicted_good.append(sum_good)
            predicted_mal.append(sum_mal)
                  
        for j in range (len(corpus2)):
            sum_mal=0
            sum_good=0
            new_test=corpus2[j].split()


            for i in range(len(new_test)-1):


                if(mix_malware_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_mal+=1
                    


                if(mix_goodware_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_good+=1
                  
                     
            if(sum_good==sum_mal):
                sum_good+=10
                
            predicted_good.append(sum_good)
            predicted_mal.append(sum_mal)
                
                
           





        csv_input['ant_good_2'] = predicted_good
        csv_input['ant_mal_2']=predicted_mal
        csv_input.to_csv('braz-mal12.csv')


        #     if(sum_mal==0 and sum_good==0):
        #         print(new_test)
        #         print(i)


        #     print("GOOD SUM = "+str(sum_good)+str(i))
        #     print("MAL SUM = "+str(sum_mal)+str(i))
#             if(sum_mal<sum_good):
#                 predicted_good.append(1)
               

#             elif(sum_mal>sum_good):
#                 predicted_mal.append(1)
#             else:
#                 equal.append(1)
    
            
            
#         print("Classification for "+ " is equal to ")
#         print("Length of the dataset is equal to " + str(len(corpus)))
#         print("Instances classified as goodware "+str(len(predicted_good)))
#         print("Instances classified as malware " + str(len(predicted_mal)))
        
    
    
            
            
    def exTfidf(self,dataset):
        csv_input = pd.read_csv('goodware____2.csv')


        data=pd.read_csv('goodware____2.csv')
        corpus=data['ImportedSymbols']

        predicted_good=[]
        predicted_mal=[]
        equal=[]
        for j in range (len(corpus)):
            sum_mal=0
            sum_good=0
            new_test=corpus[j].split()
            


            for i in range(len(new_test)-1):
                temp=new_test[i].lower()+" "+new_test[i+1].lower()
                
                


                if(model2.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_mal+=model2.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))
                
                
                elif temp in tfidf2.vectorizer.vocabulary_.keys():
                    c=tfidf2.vectorizer.vocabulary_[temp]
                    y=tfidf2.tfidf_vector[:,c].todense()
                    sum_mal+=y.sum()/len(y)

                   


#                 if(model.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
#                     sum_good+=model.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))
                    
                    
#                 elif temp in tfidf.vectorizer.vocabulary_.keys():
#                     c=tfidf.vectorizer.vocabulary_[temp]
#                     y=tfidf.tfidf_vector[:,c].todense()
#                     sum_good+=y.sum()/len(y)
       
                 

        #     if(sum_mal==0 and sum_good==0):
        #         print(new_test)
        #         print(i)


        #     print("GOOD SUM = "+str(sum_good)+str(i))
        #     print("MAL SUM = "+str(sum_mal)+str(i))
            
            predicted_good.append(sum_mal)
            
            

            
        csv_input['TFIDF_2'] = predicted_good
        csv_input.to_csv('goodware____4.csv')
        
        
        
        
    def check4(self,dataset,dataset2):
        
        data=pd.read_csv('braz-malware.csv')
        corpus=data['ImportedSymbols']
        corpus2=dataset2
        csv_input = pd.read_csv('braz-mal4.csv')


        predicted_good=[]
        predicted_mal=[]
        equal=[]
        for j in range (len(corpus)):
            sum_mal=0
            sum_good=0
            new_test=corpus[j].split()
            


            for i in range(len(new_test)-1):
                temp=new_test[i].lower()+" "+new_test[i+1].lower()
                
                


                if(model2.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_mal+=model2.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))
                
                
#                 elif temp in tfidf2.vectorizer.vocabulary_.keys():
#                     c=tfidf2.vectorizer.vocabulary_[temp]
#                     y=tfidf2.tfidf_vector[:,c].todense()
#                     sum_mal+=y.sum()/len(y)

                   


                if(model.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_good+=model.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))
                    
                    
#                 elif temp in tfidf.vectorizer.vocabulary_.keys():
#                     c=tfidf.vectorizer.vocabulary_[temp]
#                     y=tfidf.tfidf_vector[:,c].todense()
#                     sum_good+=y.sum()/len(y)
       
                 

        #     if(sum_mal==0 and sum_good==0):
        #         print(new_test)
        #         print(i)


        #     print("GOOD SUM = "+str(sum_good)+str(i))
        #     print("MAL SUM = "+str(sum_mal)+str(i))
        
            
            predicted_good.append(sum_good)
            predicted_mal.append(sum_mal)
            
                   
        for j in range (len(corpus2)):
            sum_mal=0
            sum_good=0
            new_test=corpus2[j].split()


            for i in range(len(new_test)-1):


                if(model2.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_mal+=model2.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))
                
                
#                 elif temp in tfidf2.vectorizer.vocabulary_.keys():
#                     c=tfidf2.vectorizer.vocabulary_[temp]
#                     y=tfidf2.tfidf_vector[:,c].todense()
#                     sum_mal+=y.sum()/len(y)

                   


                if(model.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))!=None):
                    sum_good+=model.tfidf_map.get((new_test[i].lower(),new_test[i+1].lower()))
                    
                     
                    
            predicted_good.append(sum_good)
            predicted_mal.append(sum_mal)
                
        
            
            

        csv_input['TF_mal'] = predicted_mal   
        csv_input['TF_good'] = predicted_good
        csv_input.to_csv('braz-mal6.csv')
             
        def exW2v(self,dataset):
#         csv_input = pd.read_csv('goodware____4.csv')


#         data=pd.read_csv('goodware____4.csv')
        corpus=dataset

        predicted_good=[]
        predicted_mal=[]
        equal=[]
        
        for j in range (len(corpus)):
            sum_mal=1
            sum_good=1
            new_test=corpus[j].split()
            

          
            for i in range(len(new_test)-1):
                
                
                if(new_test[i].lower() in w2v.word2vec_vector.wv.key_to_index and new_test[i+1].lower() in w2v.word2vec_vector.wv.key_to_index):
                    
                    frequency= w2v.word2vec_vector.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
#                     if(frequency>0):
                        
                    sum_good+=frequency
                if(new_test[i].lower() in w2v2.word2vec_vector.wv.key_to_index and new_test[i+1].lower()  in w2v2.word2vec_vector.wv.key_to_index):
                    frequency2=w2v2.word2vec_vector.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
#                     if(frequency2>0):
                        
                    sum_mal+=frequency2
               
            
            if(sum_good>sum_mal):
                
                predicted_good.append(1)
            if(sum_mal>sum_good):
                predicted_mal.append(1)
            
        print("Length of the dataset is equal to " + str(len(dataset)))
        print("Instances classified as goodware "+str(len(predicted_good)))
        print("Instances classified as malware " + str(len(predicted_mal)))
        print("Cant Classify = " +str(len(equal)))
 
                
                
                
                
                 
   
    def exW2v2(self):
            csv_input = pd.read_csv('braz-mal12.csv')


            data=pd.read_csv('braz-malware.csv')
            corpus=data['ImportedSymbols']
            data2=pd.read_csv('goodware.csv')
            corpus2=data2['ImportedSymbols']
          

            predicted_good=[]
            predicted_mal=[]
            equal=[]
            for j in range (len(corpus)):
                sum_mal=1
                sum_good=1
                new_test=corpus[j].split()



                for i in range(len(new_test)-1):
                    if(new_test[i].lower() in w2v.word2vec_vector.wv.key_to_index and new_test[i+1].lower() in w2v.word2vec_vector.wv.key_to_index):
                    
                        frequency= w2v.word2vec_vector.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
                        if(frequency>0):
                        
                            sum_good*=frequency
                    if(new_test[i].lower() in w2v2.word2vec_vector.wv.key_to_index and new_test[i+1].lower()  in w2v2.word2vec_vector.wv.key_to_index):
                        frequency2=w2v2.word2vec_vector.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
                        if(frequency2>0):
                        
                            sum_mal*=frequency2
                            
                            
                
               

                predicted_good.append(sum_good)
                predicted_mal.append(sum_mal)
                
            for j in range (len(corpus2)):
                sum_mal=1
                sum_good=1
                new_test=corpus2[j].split()



                for i in range(len(new_test)-1):
                    if(new_test[i].lower() in w2v.word2vec_vector.wv.key_to_index and new_test[i+1].lower() in w2v.word2vec_vector.wv.key_to_index):
                    
                        frequency= w2v.word2vec_vector.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
                        if(frequency>0):
                        
                            sum_good*=frequency*1.1
                    if(new_test[i].lower() in w2v2.word2vec_vector.wv.key_to_index and new_test[i+1].lower()  in w2v2.word2vec_vector.wv.key_to_index):
                        frequency2=w2v2.word2vec_vector.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
                        if(frequency2>0):
                        
                            sum_mal*=frequency2
               

                predicted_good.append(sum_good)
                predicted_mal.append(sum_mal)






            csv_input['w2v_good_2'] = predicted_good
            csv_input['w2v_mal_2']=predicted_mal
            csv_input.to_csv('braz-mal13.csv')
            
            
    def exGE(self):
            csv_input = pd.read_csv('braz-mal.csv')


            data=pd.read_csv('braz-malware.csv')
            corpus=data['ImportedSymbols']
            data2=pd.read_csv('goodware.csv')
            corpus2=data2['ImportedSymbols']

            predicted_good=[]
            predicted_mal=[]
            equal=[]
            for j in range (len(corpus)):
                sum_mal=0
                sum_good=0
                new_test=corpus[j].split()



                for i in range(len(new_test)-1):
                    if(new_test[i].lower() in model_n2v.w2v_model.wv.key_to_index and new_test[i+1].lower() in model_n2v.w2v_model.wv.key_to_index):
                    
                        frequency= model_n2v.w2v_model.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
                        sum_good+=frequency
                    if(new_test[i].lower() in model2_n2v.w2v_model.wv.key_to_index and new_test[i+1].lower()  in model2_n2v.w2v_model.wv.key_to_index):
                        frequency2=model2_n2v.w2v_model.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
                        sum_mal+=frequency2

                predicted_good.append(sum_good)
                predicted_mal.append(sum_mal)
                
            for j in range (len(corpus2)):
                sum_mal=0
                sum_good=0
                new_test=corpus2[j].split()



                for i in range(len(new_test)-1):
                    if(new_test[i].lower() in model_n2v.w2v_model.wv.key_to_index and new_test[i+1].lower() in model_n2v.w2v_model.wv.key_to_index):
                    
                        frequency= model_n2v.w2v_model.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
                        sum_good+=frequency
                    if(new_test[i].lower() in model2_n2v.w2v_model.wv.key_to_index and new_test[i+1].lower()  in model2_n2v.w2v_model.wv.key_to_index):
                        frequency2=model2_n2v.w2v_model.wv.similarity(new_test[i].lower(),new_test[i+1].lower())
                        sum_mal+=frequency2

                predicted_good.append(sum_good)
                predicted_mal.append(sum_mal)






            csv_input['ge_good'] = predicted_good
            csv_input['ge_mal']=predicted_mal
            csv_input.to_csv('braz-mal3.csv')
            
            
            
    def FourGramTF(self,dataset,dataset2):
       
            data=pd.read_csv('braz-malware.csv')
            corpus=data['ImportedSymbols']
            corpus2=dataset2
            csv_input = pd.read_csv('braz-mal14.csv')

            predicted_good=[]
            predicted_mal=[]
            equal=[]
            for j in range (len(corpus)):
                sum_mal=0
                sum_good=0
                new_test=corpus[j].split()


                for i in range(len(new_test)-3):
                    temp=new_test[i].lower()+" "+new_test[i+1].lower()+" "+new_test[i+2]+" "+new_test[i+3]


                    if(temp in tfidf.vectorizer.vocabulary_.keys()):
                        sum_good+=1
                    


                    if(temp in tfidf2.vectorizer.vocabulary_.keys()):
                        sum_mal+=1


                predicted_good.append(sum_good)
                predicted_mal.append(sum_mal)

            for j in range (len(corpus2)):
                sum_mal=0
                sum_good=0
                new_test=corpus2[j].split()


                for i in range(len(new_test)-3):


                    temp=new_test[i].lower()+" "+new_test[i+1].lower()+" "+new_test[i+2]+" "+new_test[i+3]
                    if(temp in tfidf.vectorizer.vocabulary_.keys()):
                        sum_good+=1
                    if(temp in tfidf2.vectorizer.vocabulary_.keys()):
                        sum_mal+=1
                
                predicted_good.append(sum_good)
                predicted_mal.append(sum_mal)

            csv_input['4_ngram_good'] = predicted_good
            csv_input['4_ngram_mal']=predicted_mal
            csv_input.to_csv('braz-mal16.csv')





      
   
        
    



      
   
        
    

   
        
        


   
   
