class Graph():
    
    def __init__(self,save_location,graph=None):
        self.graph=graph
        self.save_location=save_location
       
    def importMatrix(self,graph_location):
        
        with open(graph_location, 'r') as f:
            self.graph = json.loads(f.read())
            
        self.graph=np.array(self.graph)
            
        

        
        
        
    
    def drawGraph(self):
        
        Z = nx.DiGraph(self.graph)
        labels = nx.get_edge_attributes(Z,'weight')
        G = nx.DiGraph()                                                                                                                                     
        fedges = filter(lambda x: Z.degree()[x[0]] > 0 and Z.degree()[x[1]] > 0,Z.edges())
        G.add_edges_from(fedges)
        f = plt.figure()
        f.set_figwidth(90)
        f.set_figheight(90)
        pos=nx.spring_layout(G) 
        nx.draw_networkx(G,pos)

        nx.draw_networkx_edge_labels(G,pos,edge_labels=labels)
        plt.savefig(self.save_location,bbox_inches='tight')
        plt.close()
graph_instance=Graph("our_tfidf_malware_graph1.png",graph=np.array(ant_colony.matrix))
graph_instance.drawGraph()
graph_instance2=Graph("our_tfidf_goodware_graph1.png",graph=np.array(ant_colony2.matrix))
graph_instance2.drawGraph()
